type: edu
files:
- name: tests.py
  visible: false
  text: "from hstest.stage_test import *\nfrom hstest.test_case import TestCase\n\
    import re\n\n\nclass EasyRiderStage5(StageTest):\n    def generate(self) -> List[TestCase]:\n\
    \        return [\n            TestCase(\n                stdin='[{\"bus_id\"\
    \ : 512, \"stop_id\" : 4, \"stop_name\" : \"Bourbon Street\", \"next_stop\" :\
    \ 6, \"stop_type\" : \"S\", \"a_time\" : \"08:13\"}, '\n                     \
    \ '{\"bus_id\" : 512, \"stop_id\" : 6, \"stop_name\" : \"Sunset Boulevard\", \"\
    next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"08:16\"}]',\n         \
    \       attach=\"OK\"),\n            TestCase(\n                stdin='[{\"bus_id\"\
    \ : 128, \"stop_id\" : 1, \"stop_name\" : \"Prospekt Avenue\", \"next_stop\" :\
    \ 3, \"stop_type\" : \"S\", \"a_time\" : \"08:12\"}, '\n                     \
    \ '{\"bus_id\" : 128, \"stop_id\" : 3, \"stop_name\" : \"Elm Street\", \"next_stop\"\
    \ : 5, \"stop_type\" : \"\", \"a_time\" : \"08:19\"}, '\n                    \
    \  '{\"bus_id\" : 128, \"stop_id\" : 5, \"stop_name\" : \"Fifth Avenue\", \"next_stop\"\
    \ : 7, \"stop_type\" : \"O\", \"a_time\" : \"08:17\"}, '\n                   \
    \   '{\"bus_id\" : 128, \"stop_id\" : 7, \"stop_name\" : \"Sesame Street\", \"\
    next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"08:07\"}, '\n         \
    \             '{\"bus_id\" : 256, \"stop_id\" : 2, \"stop_name\" : \"Pilotow Street\"\
    , \"next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\" : \"09:20\"}, '\n     \
    \                 '{\"bus_id\" : 256, \"stop_id\" : 3, \"stop_name\" : \"Elm Street\"\
    , \"next_stop\" : 6, \"stop_type\" : \"\", \"a_time\" : \"09:45\"}, '\n      \
    \                '{\"bus_id\" : 256, \"stop_id\" : 6, \"stop_name\" : \"Sunset\
    \ Boulevard\", \"next_stop\" : 7, \"stop_type\" : \"\", \"a_time\" : \"09:44\"\
    }, '\n                      '{\"bus_id\" : 256, \"stop_id\" : 7, \"stop_name\"\
    \ : \"Sesame Street\", \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" :\
    \ \"10:12\"}, '\n                      '{\"bus_id\" : 512, \"stop_id\" : 4, \"\
    stop_name\" : \"Bourbon Street\", \"next_stop\" : 6, \"stop_type\" : \"S\", \"\
    a_time\" : \"08:13\"}, '\n                      '{\"bus_id\" : 512, \"stop_id\"\
    \ : 6, \"stop_name\" : \"Sunset Boulevard\", \"next_stop\" : 0, \"stop_type\"\
    \ : \"F\", \"a_time\" : \"08:16\"}]',\n                attach=((('128', 'Fifth\
    \ Avenue'), ('256', 'Sunset Boulevard')), 3)),\n            TestCase(\n      \
    \          stdin='[{\"bus_id\" : 128, \"stop_id\" : 1, \"stop_name\" : \"Fifth\
    \ Avenue\", \"next_stop\" : 4, \"stop_type\" : \"S\", \"a_time\" : \"08:12\"},\
    \ '\n                      '{\"bus_id\" : 128, \"stop_id\" : 4, \"stop_name\"\
    \ : \"Abbey Road\", \"next_stop\" : 5, \"stop_type\" : \"\", \"a_time\" : \"08:19\"\
    },  '\n                      '{\"bus_id\" : 128, \"stop_id\" : 5, \"stop_name\"\
    \ : \"Santa Monica Boulevard\", \"next_stop\" : 8, \"stop_type\" : \"O\", \"a_time\"\
    \ : \"08:25\"},  '\n                      '{\"bus_id\" : 128, \"stop_id\" : 8,\
    \ \"stop_name\" : \"Elm Street\", \"next_stop\" : 11, \"stop_type\" : \"\", \"\
    a_time\" : \"08:37\"},  '\n                      '{\"bus_id\" : 128, \"stop_id\"\
    \ : 11, \"stop_name\" : \"Beale Street\", \"next_stop\" : 12, \"stop_type\" :\
    \ \"\", \"a_time\" : \"09:20\"},  '\n                      '{\"bus_id\" : 128,\
    \ \"stop_id\" : 12, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 14, \"\
    stop_type\" : \"\", \"a_time\" : \"09:45\"},  '\n                      '{\"bus_id\"\
    \ : 128, \"stop_id\" : 14, \"stop_name\" : \"Bourbon Street\", \"next_stop\" :\
    \ 19, \"stop_type\" : \"O\", \"a_time\" : \"09:59\"},  '\n                   \
    \   '{\"bus_id\" : 128, \"stop_id\" : 19, \"stop_name\" : \"Prospekt Avenue\"\
    , \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"10:12\"},  '\n    \
    \                  '{\"bus_id\" : 256, \"stop_id\" : 2, \"stop_name\" : \"Pilotow\
    \ Street\", \"next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\" : \"08:13\"},\
    \  '\n                      '{\"bus_id\" : 256, \"stop_id\" : 3, \"stop_name\"\
    \ : \"Startowa Street\", \"next_stop\" : 8, \"stop_type\" : \"\", \"a_time\" :\
    \ \"08:16\"},  '\n                      '{\"bus_id\" : 256, \"stop_id\" : 8, \"\
    stop_name\" : \"Elm Street\", \"next_stop\" : 10, \"stop_type\" : \"\", \"a_time\"\
    \ : \"08:29\"},  '\n                      '{\"bus_id\" : 256, \"stop_id\" : 10,\
    \ \"stop_name\" : \"Lombard Street\", \"next_stop\" : 12, \"stop_type\" : \"\"\
    , \"a_time\" : \"08:44\"},  '\n                      '{\"bus_id\" : 256, \"stop_id\"\
    \ : 12, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 13, \"stop_type\" :\
    \ \"O\", \"a_time\" : \"08:46\"},  '\n                      '{\"bus_id\" : 256,\
    \ \"stop_id\" : 13, \"stop_name\" : \"Orchard Road\", \"next_stop\" : 16, \"stop_type\"\
    \ : \"\", \"a_time\" : \"09:13\"},  '\n                      '{\"bus_id\" : 256,\
    \ \"stop_id\" : 16, \"stop_name\" : \"Sunset Boulevard\", \"next_stop\" : 17,\
    \ \"stop_type\" : \"O\", \"a_time\" : \"09:26\"},  '\n                      '{\"\
    bus_id\" : 256, \"stop_id\" : 17, \"stop_name\" : \"Khao San Road\", \"next_stop\"\
    \ : 20, \"stop_type\" : \"O\", \"a_time\" : \"10:25\"},  '\n                 \
    \     '{\"bus_id\" : 256, \"stop_id\" : 20, \"stop_name\" : \"Michigan Avenue\"\
    , \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"11:26\"},  '\n    \
    \                  '{\"bus_id\" : 512, \"stop_id\" : 6, \"stop_name\" : \"Arlington\
    \ Road\", \"next_stop\" : 7, \"stop_type\" : \"S\", \"a_time\" : \"11:06\"}, \
    \ '\n                      '{\"bus_id\" : 512, \"stop_id\" : 7, \"stop_name\"\
    \ : \"Parizska Street\", \"next_stop\" : 8, \"stop_type\" : \"\", \"a_time\" :\
    \ \"11:15\"},  '\n                      '{\"bus_id\" : 512, \"stop_id\" : 8, \"\
    stop_name\" : \"Elm Street\", \"next_stop\" : 9, \"stop_type\" : \"\", \"a_time\"\
    \ : \"11:56\"},  '\n                      '{\"bus_id\" : 512, \"stop_id\" : 9,\
    \ \"stop_name\" : \"Niebajka Avenue\", \"next_stop\" : 15, \"stop_type\" : \"\"\
    , \"a_time\" : \"12:20\"},  '\n                      '{\"bus_id\" : 512, \"stop_id\"\
    \ : 15, \"stop_name\" : \"Jakis Street\", \"next_stop\" : 16, \"stop_type\" :\
    \ \"\", \"a_time\" : \"12:44\"},  '\n                      '{\"bus_id\" : 512,\
    \ \"stop_id\" : 16, \"stop_name\" : \"Sunset Boulevard\", \"next_stop\" : 18,\
    \ \"stop_type\" : \"\", \"a_time\" : \"13:01\"},  '\n                      '{\"\
    bus_id\" : 512, \"stop_id\" : 18, \"stop_name\" : \"Jakas Avenue\", \"next_stop\"\
    \ : 19, \"stop_type\" : \"\", \"a_time\" : \"14:00\"},  '\n                  \
    \    '{\"bus_id\" : 1024, \"stop_id\" : 21, \"stop_name\" : \"Karlikowska Avenue\"\
    , \"next_stop\" : 12, \"stop_type\" : \"S\", \"a_time\" : \"13:01\"},  '\n   \
    \                   '{\"bus_id\" : 1024, \"stop_id\" : 12, \"stop_name\" : \"\
    Sesame Street\", \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"14:00\"\
    },  '\n                      '{\"bus_id\" : 512, \"stop_id\" : 19, \"stop_name\"\
    \ : \"Prospekt Avenue\", \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\"\
    \ : \"14:11\"}]',\n                attach=\"OK\"),\n            TestCase(\n  \
    \              stdin='[{\"bus_id\" : 128, \"stop_id\" : 1, \"stop_name\" : \"\
    Fifth Avenue\", \"next_stop\" : 4, \"stop_type\" : \"S\", \"a_time\" : \"08:12\"\
    }, '\n                      '{\"bus_id\" : 128, \"stop_id\" : 4, \"stop_name\"\
    \ : \"Abbey Road\", \"next_stop\" : 5, \"stop_type\" : \"\", \"a_time\" : \"08:19\"\
    },  '\n                      '{\"bus_id\" : 128, \"stop_id\" : 5, \"stop_name\"\
    \ : \"Santa Monica Boulevard\", \"next_stop\" : 8, \"stop_type\" : \"O\", \"a_time\"\
    \ : \"08:25\"},  '\n                      '{\"bus_id\" : 128, \"stop_id\" : 8,\
    \ \"stop_name\" : \"Elm Street\", \"next_stop\" : 11, \"stop_type\" : \"\", \"\
    a_time\" : \"08:37\"},  '\n                      '{\"bus_id\" : 128, \"stop_id\"\
    \ : 11, \"stop_name\" : \"Beale Street\", \"next_stop\" : 12, \"stop_type\" :\
    \ \"\", \"a_time\" : \"09:20\"},  '\n                      '{\"bus_id\" : 128,\
    \ \"stop_id\" : 12, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 14, \"\
    stop_type\" : \"\", \"a_time\" : \"09:45\"},  '\n                      '{\"bus_id\"\
    \ : 128, \"stop_id\" : 14, \"stop_name\" : \"Bourbon Street\", \"next_stop\" :\
    \ 19, \"stop_type\" : \"O\", \"a_time\" : \"09:59\"},  '\n                   \
    \   '{\"bus_id\" : 128, \"stop_id\" : 19, \"stop_name\" : \"Prospekt Avenue\"\
    , \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"10:12\"},  '\n    \
    \                  '{\"bus_id\" : 256, \"stop_id\" : 2, \"stop_name\" : \"Pilotow\
    \ Street\", \"next_stop\" : 3, \"stop_type\" : \"S\", \"a_time\" : \"08:13\"},\
    \  '\n                      '{\"bus_id\" : 256, \"stop_id\" : 3, \"stop_name\"\
    \ : \"Startowa Street\", \"next_stop\" : 8, \"stop_type\" : \"\", \"a_time\" :\
    \ \"08:16\"},  '\n                      '{\"bus_id\" : 256, \"stop_id\" : 8, \"\
    stop_name\" : \"Elm Street\", \"next_stop\" : 10, \"stop_type\" : \"\", \"a_time\"\
    \ : \"08:29\"},  '\n                      '{\"bus_id\" : 256, \"stop_id\" : 10,\
    \ \"stop_name\" : \"Lombard Street\", \"next_stop\" : 12, \"stop_type\" : \"\"\
    , \"a_time\" : \"08:28\"},  '\n                      '{\"bus_id\" : 256, \"stop_id\"\
    \ : 12, \"stop_name\" : \"Sesame Street\", \"next_stop\" : 13, \"stop_type\" :\
    \ \"O\", \"a_time\" : \"08:27\"},  '\n                      '{\"bus_id\" : 256,\
    \ \"stop_id\" : 13, \"stop_name\" : \"Orchard Road\", \"next_stop\" : 16, \"stop_type\"\
    \ : \"\", \"a_time\" : \"08:42\"},  '\n                      '{\"bus_id\" : 256,\
    \ \"stop_id\" : 16, \"stop_name\" : \"Sunset Boulevard\", \"next_stop\" : 17,\
    \ \"stop_type\" : \"O\", \"a_time\" : \"09:26\"},  '\n                      '{\"\
    bus_id\" : 256, \"stop_id\" : 17, \"stop_name\" : \"Khao San Road\", \"next_stop\"\
    \ : 20, \"stop_type\" : \"O\", \"a_time\" : \"10:25\"},  '\n                 \
    \     '{\"bus_id\" : 256, \"stop_id\" : 20, \"stop_name\" : \"Michigan Avenue\"\
    , \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"11:26\"},  '\n    \
    \                  '{\"bus_id\" : 512, \"stop_id\" : 6, \"stop_name\" : \"Arlington\
    \ Road\", \"next_stop\" : 7, \"stop_type\" : \"S\", \"a_time\" : \"11:06\"}, \
    \ '\n                      '{\"bus_id\" : 512, \"stop_id\" : 7, \"stop_name\"\
    \ : \"Parizska Street\", \"next_stop\" : 8, \"stop_type\" : \"\", \"a_time\" :\
    \ \"11:15\"},  '\n                      '{\"bus_id\" : 512, \"stop_id\" : 8, \"\
    stop_name\" : \"Elm Street\", \"next_stop\" : 9, \"stop_type\" : \"\", \"a_time\"\
    \ : \"11:06\"},  '\n                      '{\"bus_id\" : 512, \"stop_id\" : 9,\
    \ \"stop_name\" : \"Niebajka Avenue\", \"next_stop\" : 15, \"stop_type\" : \"\"\
    , \"a_time\" : \"12:20\"},  '\n                      '{\"bus_id\" : 512, \"stop_id\"\
    \ : 15, \"stop_name\" : \"Jakis Street\", \"next_stop\" : 16, \"stop_type\" :\
    \ \"\", \"a_time\" : \"12:44\"},  '\n                      '{\"bus_id\" : 512,\
    \ \"stop_id\" : 16, \"stop_name\" : \"Sunset Boulevard\", \"next_stop\" : 18,\
    \ \"stop_type\" : \"\", \"a_time\" : \"13:01\"},  '\n                      '{\"\
    bus_id\" : 512, \"stop_id\" : 18, \"stop_name\" : \"Jakas Avenue\", \"next_stop\"\
    \ : 19, \"stop_type\" : \"\", \"a_time\" : \"14:00\"},  '\n                  \
    \    '{\"bus_id\" : 1024, \"stop_id\" : 21, \"stop_name\" : \"Karlikowska Avenue\"\
    , \"next_stop\" : 12, \"stop_type\" : \"S\", \"a_time\" : \"13:01\"},  '\n   \
    \                   '{\"bus_id\" : 1024, \"stop_id\" : 12, \"stop_name\" : \"\
    Sesame Street\", \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\" : \"13:00\"\
    },  '\n                      '{\"bus_id\" : 512, \"stop_id\" : 19, \"stop_name\"\
    \ : \"Prospekt Avenue\", \"next_stop\" : 0, \"stop_type\" : \"F\", \"a_time\"\
    \ : \"14:11\"}]',\n                attach=((('256', 'Lombard Street'), ('512',\
    \ 'Elm Street'), ('1024', 'Sesame Street')), 4)),\n        ]\n\n    def check(self,\
    \ reply: str, result) -> CheckResult:\n        if isinstance(result, str):\n \
    \           if result not in reply:\n                return CheckResult.wrong(f\"\
    Wrong number of bugs detected or wrong output format.\"\n                    \
    \                     f\"Expected output: '{result}'.\")\n        else:\n    \
    \        output_len = len(reply.strip().split('\\n'))\n            if output_len\
    \ != result[1]:\n                if len(result[0]) == 2:\n                   \
    \ return CheckResult.wrong(f\"Wrong number of text lines in output. Found {output_len},\
    \ \"\n                                             f\"expected {result[1]}.\\\
    n\" \n                                             \"Expected output:\\n\\n\"\n\
    \                                             \"Arrival time test:\\n\"\n    \
    \                                         f\"bus_id line {result[0][0][0]}: wrong\
    \ time on station {result[0][0][1]}\\n\"\n                                   \
    \          f\"bus_id line {result[0][1][0]}: wrong time on station {result[0][1][1]}\"\
    )\n                else:\n                    return CheckResult.wrong(f\"Wrong\
    \ number of text lines in output. Found {output_len}, \"\n                   \
    \                          f\"expected {result[1]}.\\n\" \n                  \
    \                           \"Expected output:\\n\\n\"\n                     \
    \                        \"Arrival time test:\\n\"\n                         \
    \                    f\"bus_id line {result[0][0][0]}: wrong time on station {result[0][0][1]}\\\
    n\"\n                                             f\"bus_id line {result[0][1][0]}:\
    \ wrong time on station {result[0][1][1]}\\n\"\n                             \
    \                f\"bus_id line {result[0][2][0]}: wrong time on station {result[0][2][1]}\"\
    )\n\n            for x in range(len(result[0])):\n                query = result[0][x][0]\
    \ + \"[\\\\D]*\" + result[0][x][1] + \"\\n\"\n                response = re.search(rf'{query}',\
    \ reply)\n                if not response or sum(\n                        response.group(0).count(txt)\
    \ for txt in (\"Avenue\", \"Street\", \"Boulevard\", \"Road\")) != 1:\n      \
    \              return CheckResult.wrong(\"Wrong number of bugs detected or the\
    \ output format is wrong in bus line \"\n                                    \
    \         f\"{result[0][x][0]}. Expected output:\\n\\n\" \n                  \
    \                           f\"bus_id line {result[0][x][0]}: wrong time on station\
    \ {result[0][x][1]}\")\n        return CheckResult.correct()\n\n\nif __name__\
    \ == '__main__':\n    EasyRiderStage5('easyrider.easyrider').run_tests()\n"
  learner_created: false
- name: easyrider/spec.py
  visible: true
  text: |
    import re


    class Spec:
        """
        Run program with `-t` or `--test` parameter to test with
        `test_data.json` test sets
        """

        requirements = {
            'bus_id': {'type': type(1), 'required': True},
            'stop_id': {'type': type(1), 'required': True},
            'stop_name': {
                'type': type(''),
                'required': True,
                'match': lambda v: not re.match(
                    r'[A-Z]([\w\s]+)(Road|Avenue|Boulevard|Street)$', v)
            },
            'next_stop': {'type': type(1), 'required': True},
            'stop_type': {
                'type': type('d'),
                'match': lambda v: bool(
                    # if not in 'SOF' or not empty -> increment errors
                    re.match('([^SOF])|(^"")', v)
                    or
                    # not len=1 + required=False (len=0) -> increment errors
                    len(re.findall('([SOF])', str(v))) > 1
                )
            },
            'a_time': {
                'type': type(''),
                'required': True,
                'match': lambda v: not re.match(r'([0-1]\d|2[0-3]):([0-5]\d)$', v),
            },
        }

        def __init__(self):
            self.rtf = {
                "start": [],
                "transfer": {},
                "end": [],
            }
            self.errors = None
            self.correct_data = []
            self.schedule = {}
            self.stops = {}
            self.lines = {}

        def __str__(self):
            strings = [f'--- test ---']

            messages = [line['message']
                        for line_id, line in self.lines.items()
                        if 'message' in line]

            if len(messages):
                strings.append(messages[0])
            else:
                # stops
                strings.append('STOPS:')
                for stop_id, stops in self.stops.items():
                    strings.append(f'   {stop_id}: {stops}')
                strings.append('\n\n')

                # lines
                strings.append('LINES:')
                for line_id, line in self.lines.items():
                    strings.append(f'{line_id}:')
                    if 'message' in line:
                        strings.append(f'  message: {line["message"]}')
                    strings.append(f'  stops:')
                    for s in line["stops"]:
                        strings.append(f'        {s["stop_id"]}: {s}')

            strings.append('\n\n')
            return '\n'.join(strings)

        def fields(self):
            return self.requirements.items()

        @staticmethod
        def is_important(name):
            return name in ('stop_name', 'stop_type', 'a_time')

        def is_satisfied_by(self, name, value) -> int:
            return int(bool(
                # check spec `type`
                type(value) != self.requirements[name]['type']
                or
                # check spec `required`
                'required' in self.requirements[name] and
                self.requirements[name]['required'] and not len(str(value))
                or
                # check value `match` spec format
                'match' in self.requirements[name] and
                self.requirements[name]['match'](str(value))
            ))

        def check(self, object_: dict):
            if self.errors is None:
                self.errors = {p: 0 for p, t in self.fields()}

            valid_schedule = True
            for name, value in object_.items():
                error = self.is_satisfied_by(name, value)
                self.errors[name] += error
                if bool(error):
                    valid_schedule = False

            # if object_ is valid schedule
            if valid_schedule:
                if object_['bus_id'] not in self.schedule:
                    self.schedule[object_['bus_id']] = {}
                if object_['bus_id'] not in self.lines:
                    self.lines[object_['bus_id']] = {
                        'spec': object_,
                        'stops': [],
                    }

                bus_id = object_['bus_id']
                stop_id = object_['stop_id']
                self.lines[object_['bus_id']]['stops'].append(object_)

                self.schedule[bus_id][stop_id] = object_

                if object_['stop_type'] == 'S':
                    self.rtf['start'].append(object_)
                elif object_['stop_type'] == 'F':
                    self.rtf['end'].append(object_)

                if stop_id not in self.stops:
                    self.stops[stop_id] = {
                        "name": object_['stop_name'],
                        "lines": {}
                    }
                if stop_id in self.stops:
                    self.stops[stop_id]['lines'][bus_id] = list(
                        self.schedule[bus_id].keys())

        def is_satisfied(self):
            return not self.errors or self.errors and sum(
                self.errors.values()) == 0

        def report(self):
            count = sum(self.errors.values())
            print(*[
                f'Format validation: {count} errors',
                *[f'{p}: {errors}'
                  for p, errors in self.errors.items()
                  if self.is_important(p)]
            ], sep='\n', end='\n\n')

        def stops_report(self):
            print(*[
                'Line names and number of stops:',
                *[f'bus_id: {bus_id}, stops: {len(sch.items())}'
                  for bus_id, sch in self.schedule.items()]
            ], sep='\n', end='\n\n')

        def lines_report(self):
            messages = [line['message']
                        for line_id, line in self.lines.items()
                        if 'message' in line]

            if len(messages):
                print(messages[0])
                exit()
            else:
                unique_ends = {e['stop_id']: e for e in self.rtf['end']}
                print(*[
                    'Start stops: {} {}'.format(
                        len(self.rtf['start']),
                        sorted([s['stop_name'] for s in self.rtf['start']])
                    ),
                    'Transfer stops: {} {}'.format(
                        len(self.rtf['transfer']),
                        sorted([self.stops[stop_id]['name']
                                for stop_id in
                                self.rtf['transfer']])
                    ),
                    'Finish stops: {} {}'.format(
                        len(unique_ends.values()),
                        sorted([s['stop_name'] for s in unique_ends.values()])
                    )
                ], sep='\n', end='\n\n')


    if __name__ == '__MAIN__':
        print(Spec())
  learner_created: true
- name: easyrider/entity/stop.py
  visible: true
  learner_created: true
- name: easyrider/entity/trace.py
  visible: true
  learner_created: true
- name: easyrider/entity/schedule.py
  visible: true
  learner_created: true
- name: easyrider/easyrider.py
  visible: true
  text: '# Write your code here'
  learner_created: false
- name: easyrider/test_data.json
  visible: true
  learner_created: true
- name: easyrider/reports.py
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10892#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 28 Jun 2022 04:26:56 UTC
record: 5
